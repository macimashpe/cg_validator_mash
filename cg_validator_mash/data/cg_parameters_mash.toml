# =============================================================================
# User settable parameters
# =============================================================================

[payload]

# mass of payload, currently an arbitrary number, max 250 [kg]
"mass" = 50

# payload center of gravity, [mm]
# origin of coordinate system: on the floor, midpoint between the two drive wheels
# x axis is defined as transverse, orthogonal to direction of forward motion
# y axis is direction of forward motion
# z axis is height direction
[payload.cg]
"x" = 0
"y" = 5
"z" = 400

[platform]
# valid options: LD, MD(planned), HD(planned)
"type" = 'LD'


[misc]

# coefficient of friction between wheel and ground surface
"coef_friction" = 0.5

# Incline angle (rad), representing the ramp on the floor. If using FL of 15, the angle would be about 0.5 degrees
'psi' = 0
# ramp angle, not to be confused with psi which represenets minor out of levelness of the floor
'phi' = 0

[misc.max_velocity]
"translational" = 0
"rotational" = 0

[misc.max_acceleration]
"translational" = 0
"rotational" = 0

[misc.max_deceleration]
"translational" = 0
"rotational" = 0


# =============================================================================
# Other config parameters (not user settable)
# =============================================================================

# dimensions taken from "LD-250 - Mechanical and Electrical Guidelines - Rev2.pptx"
[LD.dimensions]
# length, from front to back [mm]
"length" = 969
# width, from drive wheel to drive wheel, including light discs [mm]
"width" = 721
# height, from floor to cover plate [mm]
"height" = 382
# mass, in kg
"mass" = 142
# all below pysical definitions are taken from karthick's code (...DO_NOT_DELETE.py)
"caster_swivel" = 32		# [mm]
"platform_cg_x" = 0			# [mm]
"platform_cg_y" = -44.9		# [mm]
"platform_cg_z" = 178.3		# [mm]
"platform_mass" = 142			# [kg]
"front_caster_x" = 232.5			#(mm) x-coordinate of the Swivel point of front caster   
"front_caster_y" = 285			#(mm) y-coordinate of the Swivel point of front caster  
# "front_caster_y_minus" = front_caster_y-caster_swivel		#(mm) wheel behind the caster mounting point (moving forward)
# "front_caster_y_plus" = front_caster_y+caster_swivel		#(mm) wheel in front of caster mounting point(moving backward)
"rear_caster_x" = 232.5		#(mm)x-coordinate of the Swivel point of rear caster 
"rear_caster_y" = -285		#(mm) y-coordinate of the Swivel point of rear caster
# "rear_caster_y_minus" = rear_caster_y-caster_swivel		#(mm) wheel behind the caster mounting point (moving forward)
# "rear_caster_y_plus" = rear_caster_y+caster_swivel		#(mm) wheel in front of caster mounting point(moving backward)
"drive_wheel_x" = 301.8		#(mm)
"drive_wheel_y" = 0			#(mm)

[matrix_models]
# The following matrix models taken from Shen's function.txt, and edited to fit toml syntax
# Shen: dir = 1 when driving forward; -1 when backward
# Shen: Br1, Br2, Bf1, Bf2 is a function of driving and turning direction, see code for detail
# Shen: Caster rolling resistance coefficiency in this context is set to be 0.02; Drive wheel rolling resistance coefficiency is 0.03

# MD two front side rockers, one rear rocker
# Normal Drive No Brake, ax is the robot center accel
# Fc1 and Fc2 is allocated based on the Fdz1 and Fdz1, assuming Fc1 is propotional to Fdz1. So Fc1 = Fc * Fdz1 / (Fdz1 + Fdz2) and Fc2 = Fc * Fdz2 / (Fdz1 + Fdz2)
# cols: 	Frz1	Frf1	Frz2	Frf2	Fdz1	Fdf1	Fdt1	Fdz2	Fdf2	Fdt2	Fc	Ffz1	Fff1	Ffz2	Fff2	Equals
# rows: X, Y, Z, Rx, Ry, Rz, -, RkF1, RkF2, Rkr, -, -, -, -, -, -
md_2fr_1rr_nd = [['0', '-cos(Br1)', '0', '-cos(Br2)', '0', '-1', '1', '0', '-1', '1', '0', '0', '-cos(Bf1)', '0', '-cos(Bf2)', 'M*(ax*(R-y)/R-w^2*x)+M*g*sin(theta)'],
['0', 'sin(Br1)', '0', 'sin(Br2)', '0', '0', '0', '0', '0', '0', '1', '0', '-sin(Bf1)', '0', '	-sin(Bf2)', 'M*(w^2*(R-y)+ax*x/R)'],
['1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', 'M*g*cos(theta)'],
['-(Dc-r*sin(Br1)+y)', 'sin(Br1)*h', 'Dc+r*sin(Br2)-y', 'sin(Br2)*h', '-(Dd+y)', '0', '0', 'Dd-y', '0', '0', 'h', '-(Dc+r*sin(Bf1)+y)', '-sin(Bf1)*h', 'Dc-sin(Bf2)*r-y', '-sin(Bf2)*h', '0'],
['L+r*cos(Br1)+x', 'cos(Br1)*h', 'L+r*cos(Br2)+x', 'cos(Br2)*h', 'x', 'h', '-h', 'x', 'h', '-h', '0', '-(L-r*cos(Bf1)-x)', 'cos(Bf1)*h', '-(L-r*cos(Bf2)-x)', 'cos(Bf2)*h', '0'],
['0', '-cos(Br1)*(Dc-r*sin(Br1)+y)', '0', 'cos(Br2)*(Dc+r*sin(Br2)-y)', '0', '-(Dd+y)', 'Dd+y', '0', 'Dd-y', '-(Dd-y)', '-x', '0', '-cos(Bf1)*(Dc+r*sin(Bf1)+y)', '0', 'cos(Bf2)*(Dc-r*sin(Bf2)-y)', 'Jz*ax/R'],
['0', '-sin(Br1)*(L+cos(Br1)*r+x)', '0', '-sin(Br2)*(L+cos(Br2)*r+x)', '0', '0', '0', '0', '0', '0', '0', '0', '-sin(Bf1)*(L-cos(Bf1)*r-x)', '0', '-sin(Bf2)*(L-cos(Bf2)*r-x)', '0'],
['0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '0', '-(l2-r*cos(Bf1))', 'cos(Bf1)*h1', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '-(l2-r*cos(Bf2))', 'cos(Bf2)*h1', '0'],
['-(Dc-r*sin(Br1))', 'sin(Br1)*h2', 'Dc+r*sin(Br2)', 'sin(Br2)*h2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0']]

# MD two front side rockers, one rear rocker
# Brake Drive(assume brake torque is large enough, or brake is locked)
# This function descrips the moment right after holding brakes
# ax, ay here is the CG accel, not the robot center accel
# u*Fdz1 should equal the vector sum of Fdt1 and Fc1, but because coupling Fc1 will become nonlinear so we assume 0.95*u*Fdz1 = Fdt1. This 0.95 is from taking the cos(angle) = 0.95, and this angle meets tan(angle) = Fc / Fdt ~= ac / ax ~= 1/3
# cols:	Frz1	Frf1	Frz2	Frf2	Fdz1	Fdf1	Fdt1	Fdz2	Fdf2	Fdt2	Fc	Ffz1	Fff1	Ffz2	Fff2	ax	ay	alphaZ	Equals
# rows: X, Y, Z, Rx, Ry, Rz, -, RkF1, RkF2, Rkr, -, -, -, -, -, -, -, -, -
md_2fr_1rr_bd = [['0', '-cos(Br1)', '0', '-cos(Br2)', '0', '-1', '1', '0', '-1', '1', '0', '0', '-cos(Bf1)', '0', '-cos(Bf2)', '-M', '0', '0', 'M*g*sin(theta)'],
['0', 'sin(Br1)', '0', 'sin(Br2)', '0', '0', '0', '0', '0', '0', '1', '0', '-sin(Bf1)', '0 ', '-sin(Bf2)', '0', '-M', '0', '0'],
['1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', 'M*g*cos(theta)'],
['-(Dc-r*sin(Br1)+y)', 'sin(Br1)*h', 'Dc+r*sin(Br2)-y', 'sin(Br2)*h', '-(Dd+y)', '0', '0', 'Dd-y', '0', '0', 'h', '-(Dc+r*sin(Bf1)+y)', '-sin(Bf1)*h', 'Dc-sin(Bf2)*r-y', '-sin(Bf2)*h', '0', '0', '0', '0'],
['L+r*cos(Br1)+x', 'cos(Br1)*h', 'L+r*cos(Br2)+x', 'cos(Br2)*h', 'x', 'h', '-h', 'x', 'h', '-h', '0', '-(L-r*cos(Bf1)-x)', 'cos(Bf1)*h', '-(L-r*cos(Bf2)-x)', 'cos(Bf2)*h', '0', '0', '0', '0'],
['0', '-cos(Br1)*(Dc-r*sin(Br1)+y)', '0', 'cos(Br2)*(Dc+r*sin(Br2)-y)', '0', '-(Dd+y)', 'Dd+y', '0', 'Dd-y', '-(Dd-y)', '-x', '0', '-cos(Bf1)*(Dc+r*sin(Bf1)+y)', '0', 'cos(Bf2)*(Dc-r*sin(Bf2)-y)', '0', '0', '-Jz', '0'],
['0', '-sin(Br1)*(L+cos(Br1)*r+x)', '0', '-sin(Br2)*(L+cos(Br2)*r+x)', '0', '0', '0', '0', '0', '0', '0', '0', '-sin(Bf1)*(L-cos(Bf1)*r-x)', '0', '-sin(Bf2)*(L-cos(Bf2)*r-x)', '0', '0', '0', '0'],
['0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '0', '-(l2-r*cos(Bf1))', 'cos(Bf1)*h1', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '-(l2-r*cos(Bf2))', 'cos(Bf2)*h1', '0', '0', '0', '0'],
['-(Dc-r*sin(Br1))', 'sin(Br1)*h2', 'Dc+r*sin(Br2)', 'sin(Br2)*h2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0', '0'],
['0', '0', '0', '0', '.95*u', '0', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '.95*u', '0', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '-x', 'w^2*(R-y)']]

# MD two front side rockers, one rear rocker
# Brake Drive(brake is unlocked)
# Max braking force is maxFdt
# when braking locked model has Fdt1 and Fdt2 > maxFdt, then use this matirx
# cols:	Frz1	Frf1	Frz2	Frf2	Fdz1	Fdf1	Fdt1	Fdz2	Fdf2	Fdt2	Fc	Ffz1	Fff1	Ffz2	Fff2	ax	ay	alphaZ	Equals
# rows: X, Y, Z, Rx, Ry, Rz, -, RkF1, RkF2, -, -, -, -, -, -, -, -, -
md_2fr_1rr_mbd = [['0', '-cos(Br1)', '0', '-cos(Br2)', '0', '-1', '1', '0', '-1', '1', '0', '0', '-cos(Bf1)', '0', '-cos(Bf2)', '-M', '0', '0', 'M*g*sin(theta)'],
['0', 'sin(Br1)', '0', 'sin(Br2)', '0', '0', '0', '0', '0', '0', '1', '0', '-sin(Bf1)', '0 ', '-sin(Bf2)', '0', '-M', '0', '0'],
['1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', 'M*g*cos(theta)'],
['-(Dc-r*sin(Br1)+y)', 'sin(Br1)*h', 'Dc+r*sin(Br2)-y', 'sin(Br2)*h', '-(Dd+y)', '0', '0', 'Dd-y', '0', '0', 'h', '-(Dc+r*sin(Bf1)+y)', '-sin(Bf1)*h', 'Dc-sin(Bf2)*r-y', '-sin(Bf2)*h', '0', '0', '0', '0'],
['L+r*cos(Br1)+x', 'cos(Br1)*h', 'L+r*cos(Br2)+x', 'cos(Br2)*h', 'x', 'h', '-h', 'x', 'h', '-h', '0', '-(L-r*cos(Bf1)-x)', 'cos(Bf1)*h', '-(L-r*cos(Bf2)-x)', 'cos(Bf2)*h', '0', '0', '0', '0'],
['0', '-cos(Br1)*(Dc-r*sin(Br1)+y)', '0', 'cos(Br2)*(Dc+r*sin(Br2)-y)', '0', '-(Dd+y)', 'Dd+y', '0', 'Dd-y', '-(Dd-y)', '-x', '0', '-cos(Bf1)*(Dc+r*sin(Bf1)+y)', '0', 'cos(Bf2)*(Dc-r*sin(Bf2)-y)', '0', '0', '-Jz', '0'],
['0', '-sin(Br1)*(L+cos(Br1)*r+x)', '0', '-sin(Br2)*(L+cos(Br2)*r+x)', '0', '0', '0', '0', '0', '0', '0', '0', '-sin(Bf1)*(L-cos(Bf1)*r-x)', '0', '-sin(Bf2)*(L-cos(Bf2)*r-x)', '0', '0', '0', '0'],
['0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '0', '-(l2-r*cos(Bf1))', 'cos(Bf1)*h1', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '-(l2-r*cos(Bf2))', 'cos(Bf2)*h1', '0', '0', '0', '0'],
['-(Dc-r*sin(Br1))', 'sin(Br1)*h2', 'Dc+r*sin(Br2)', 'sin(Br2)*h2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-maxFdt'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '-maxFdt'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '-x', 'w^2*(R-y)']]

# LD450 No Rear Rocker Normal Drive
# Rear rocker balance function is gone. We need another function. Now its four contact points, two rear casters and two front side rocker pivot points.
# Consider torques from Rx direction, STr(sum of Torque from Rear Caster Normal Force) + STf(sum of Torque from Front Rocker Pivot Normal Force) + STn(sum of Torque from non-normal forces) = 0
# Rotation stiffness of the front and rear is Kf and Kr, and STr = Kr*(Rx Angle), STf = Kf*(Rx Angle). Assuming rigid body, so Rx angle for front and back is the same, the we have Kk = Kr/(Kr+Kf) = STr/(STr + STf) = STr/(-STn). This is the additional function.
# The Kf here is the stiffness on pivot pin, which is equivalent to the stiffness of caster plus rocker beam (in serial). 
# Fc1 and Fc2 is allocated based on the Fdz1 and Fdz1, assuming Fc1 is propotional to Fdz1. So Fc1 = Fc * Fdz1 / (Fdz1 + Fdz2) and Fc2 = Fc * Fdz2 / (Fdz1 + Fdz2)
# If there is an additional constant force Fspring pushing drive down through a spring, then the rocker balance function needs to be modified. Fspring positive direction means pulling drive down; negative means pushing down.
# cols:	Frz1	Frf1	Frz2	Frf2	Fdz1	Fdf1	Fdt1	Fdz2	Fdf2	Fdt2	Fc	Ffz1	Fff1	Ffz2	Fff2	Equals
# rows: X, Y, Z, Rx, Ry, Rz, -, RkF1, RkF2, SuspB, -, -, -, -, -, -
ld450_0rr_nd = [['0', '-cos(Br1)', '0', '-cos(Br2)', '0', '-1', '1', '0', '-1', '1', '0', '0', '-cos(Bf1)', '0', '-cos(Bf2)', 'M*(ax*(R-y)/R-w^2*x)+M*g*sin(theta)'],
['0', 'sin(Br1)', '0', 'sin(Br2)', '0', '0', '0', '0', '0', '0', '1', '0', '-sin(Bf1)', '0 ', '-sin(Bf2)', 'M*(w^2*(R-y)+ax*x/R)'],
['1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', 'M*g*cos(theta)'],
['-(Dc-r*sin(Br1)+y)', 'sin(Br1)*h', 'Dc+r*sin(Br2)-y', 'sin(Br2)*h', '-(Dd+y)', '0', '0', 'Dd-y', '0', '0', 'h', '-(Dc+r*sin(Bf1)+y)', '-sin(Bf1)*h', 'Dc-sin(Bf2)*r-y', '-sin(Bf2)*h', '0'],
['L+r*cos(Br1)+x', 'cos(Br1)*h', 'L+r*cos(Br2)+x', 'cos(Br2)*h', 'x', 'h', '-h', 'x', 'h', '-h', '0', '-(L-r*cos(Bf1)-x)', 'cos(Bf1)*h', '-(L-r*cos(Bf2)-x)', 'cos(Bf2)*h', '0'],
['0', '-cos(Br1)*(Dc-r*sin(Br1)+y)', '0', 'cos(Br2)*(Dc+r*sin(Br2)-y)', '0', '-(Dd+y)', 'Dd+y', '0', 'Dd-y', '-(Dd-y)', '-x', '0', '-cos(Bf1)*(Dc+r*sin(Bf1)+y)', '0', 'cos(Bf2)*(Dc-r*sin(Bf2)-y)', 'Jz*ax/R'],
['0', '-sin(Br1)*(L+cos(Br1)*r+x)', '0', '-sin(Br2)*(L+cos(Br2)*r+x)', '0', '0', '0', '0', '0', '0', '0', '0', '-sin(Bf1)*(L-cos(Bf1)*r-x)', '0', '-sin(Bf2)*(L-cos(Bf2)*r-x)', '0'],
['0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '0', '-(l2-r*cos(Bf1))', 'cos(Bf1)*h1', '0', '0', '-Fspring*l1'],
['0', '0', '0', '0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '-(l2-r*cos(Bf2))', 'cos(Bf2)*h1', '-Fspring*l1'],
['-(Dc-r*sin(Br1)+y)', 'Kk*sin(Br1)*h', 'Dc+r*sin(Br2)-y', 'Kk*sin(Br2)*h', '0', '0', '0', '0', '0', '0', 'Kk*h', '0', '-Kk*sin(Bf1)*h', '0', '-Kk*sin(Bf2)*h', '0	'],
['-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0']]

# LD450 No Rear Rocker Brake Drive
# cols:	Frz1	Frf1	Frz2	Frf2	Fdz1	Fdf1	Fdt1	Fdz2	Fdf2	Fdt2	Fc	Ffz1	Fff1	Ffz2	Fff2	ax	ay	alphaZ	Equals
# rows: X, Y, Z, Rx, Ry, Rz, -, RkF1, RkF2, SuspB, -, -, -, -, -, -, -, -, -
ld450_0rr_bd = [['0', '-cos(Br1)', '0', '-cos(Br2)', '0', '-1', '1', '0', '-1', '1', '0', '0', '-cos(Bf1)', '0', '-cos(Bf2)', '-M', '0', '0', 'M*g*sin(theta)'],
['0', 'sin(Br1)', '0', 'sin(Br2)', ' ', '0', '0', '0', '0', '0', '0', '1', '0', '-sin(Bf1)', '0 ', '-sin(Bf2)', '0', '-M', '0	0'],
['1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', 'M*g*cos(theta)'],
['-(Dc-r*sin(Br1)+y)', 'sin(Br1)*h', 'Dc+r*sin(Br2)-y', 'sin(Br2)*h', '-(Dd+y)', '0', '0', 'Dd-y', '0', '0', 'h', '-(Dc+r*sin(Bf1)+y)', '-sin(Bf1)*h', 'Dc-sin(Bf2)*r-y', '-sin(Bf2)*h', '0', '0', '0', '0'],
['L+r*cos(Br1)+x', 'cos(Br1)*h', 'L+r*cos(Br2)+x', 'cos(Br2)*h', 'x', 'h', '-h', 'x', 'h', '-h', '0', '-(L-r*cos(Bf1)-x)', 'cos(Bf1)*h', '-(L-r*cos(Bf2)-x)', 'cos(Bf2)*h', '0', '0', '0', '0'],
['0', '-cos(Br1)*(Dc-r*sin(Br1)+y)', '0', 'cos(Br2)*(Dc+r*sin(Br2)-y)', '0', '-(Dd+y)', 'Dd+y', '0', 'Dd-y', '-(Dd-y)', '-x', '0', '-cos(Bf1)*(Dc+r*sin(Bf1)+y)', '0', 'cos(Bf2)*(Dc-r*sin(Bf2)-y)', '0', '0', '-Jz', '0'],
['-sin(Br1)*(L+cos(Br1)*r+x)', '-sin(Br2)*(L+cos(Br2)*r+x)', '-sin(Bf1)*(L-cos(Bf1)*r-x)', '-sin(Bf2)*(L-cos(Bf2)*r-x)', '0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '0', '-(l2-r*cos(Bf1))', 'cos(Bf1)*h1', '0', '0', '0', '0', '0', '-Fspring*l1'],
['0', '0', '0', '0', '0', '0', '0', 'l1', 'h1', '-h1', '0', '0', '0', '-(l2-r*cos(Bf2))', 'cos(Bf2)*h1', '0', '0', '0', '-Fspring*l1'],
['-(Dc-r*sin(Br1)+y)', 'Kk*sin(Br1)*h', 'Dc+r*sin(Br2)-y', 'Kk*sin(Br2)*h', '', '0', '0', '0', '0', '0', '0', 'Kk*h', '0', '-Kk*sin(Bf1)*h', '0', '-Kk*sin(Bf2)*h', '0', '0', '0	0'],
['-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0', '0'],
['0', '0', '0', '0', '.95*u', '0', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '.95*u', '0', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '-x', 'w^2*(R-y)']]

# LD250: Normal Drive
# No Rear and Front Rocker, Drive wheel has constant down force of 
# Rear and Front rocker balance function is gone but the Fdz is know. We need one more function from suspension. Now its 6 contact points, two rear casters and two front casters plus two drive wheel.
# Consider torques from Rx direction, STr(sum of Torque from Rear Caster Normal Force) + STf(sum of Torque from Front Rocker Pivot Normal Force) + STn(sum of Torque from non-normal forces) + STd(sum of torque from drive wheel normal force)= 0. 
# Because drive wheel spring stiffness is relatively small compared to caster stiffness, so the normal forces from two Drive wheels is assumed to be the same (460N), but their torque is not zero due to non-centered CG.
# Rotation stiffness of the front and rear is Kf and Kr, and STr = Kr*(Rx Angle), STf = Kf*(Rx Angle). Assuming rigid body, so Rx angle for front and back is the same, the we have Kk = Kr/(Kr+Kf) = STr/(STr + STf) = STr/(-STn-STd) = 1/2. This is the additional function.
# Fc1 and Fc2 is allocated based on the Fdz1 and Fdz1, assuming Fc1 is propotional to Fdz1. So Fc1 = Fc * Fdz1 / (Fdz1 + Fdz2) and Fc2 = Fc * Fdz2 / (Fdz1 + Fdz2). Here Fc1 = Fc2
# cols:	Frz1	Frf1	Frz2	Frf2	Fdz1	Fdf1	Fdt1	Fdz2	Fdf2	Fdt2	Fc	Ffz1	Fff1	Ffz2	Fff2	Equals
# rows: X, Y, Z, Rx, Ry, Rz, -, SuspB, -, -, -, -, -, -, -, -
ld250_nd = [['0', '-cos(Br1)', '0', '-cos(Br2)', '0', '-1', '1', '0', '-1', '1', '0', '0', '-cos(Bf1)', '0', '-cos(Bf2)', 'M*(ax*(R-y)/R-w^2*x)+M*g*sin(theta)'],
['0', 'sin(Br1)', '0', 'sin(Br2)', '0', '0', '0', '0', '0', '0', '1', '0', '-sin(Bf1)', '0 ', '-sin(Bf2)', 'M*(w^2*(R-y)+ax*x/R)'],
['1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', 'M*g*cos(theta)'],
['-(Dc-r*sin(Br1)+y)', 'sin(Br1)*h', 'Dc+r*sin(Br2)-y', 'sin(Br2)*h', '-(Dd+y)', '0', '0', 'Dd-y', '0', '0', 'h', '-(Dc+r*sin(Bf1)+y)', '-sin(Bf1)*h', 'Dc-sin(Bf2)*r-y', '-sin(Bf2)*h', '0'],
['L+r*cos(Br1)+x', 'cos(Br1)*h', 'L+r*cos(Br2)+x', 'cos(Br2)*h', 'x', 'h', '-h', 'x', 'h', '-h', '0', '-(L-r*cos(Bf1)-x)', 'cos(Bf1)*h', '-(L-r*cos(Bf2)-x)', 'cos(Bf2)*h', '0'],
['0', '-cos(Br1)*(Dc-r*sin(Br1)+y)', '0', 'cos(Br2)*(Dc+r*sin(Br2)-y)', '0', '-(Dd+y)', 'Dd+y', '0', 'Dd-y', '-(Dd-y)', '-x', '0', '-cos(Bf1)*(Dc+r*sin(Bf1)+y)', '0', 'cos(Bf2)*(Dc-r*sin(Bf2)-y)', 'Jz*ax/R'],
['0', '-sin(Br1)*(L+cos(Br1)*r+x)', '0', '-sin(Br2)*(L+cos(Br2)*r+x)', '0', '0', '0', '0', '0', '0', '0', '0', '-sin(Bf1)*(L-cos(Bf1)*r-x)', '0', '-sin(Bf2)*(L-cos(Bf2)*r-x)', '0'],
['-(Dc-r*sin(Br1)+y)', '0.5*sin(Br1)*h', 'Dc+r*sin(Br2)-y', '0.5*sin(Br2)*h', '-(Dd+y)', '0', '0', 'Dd-y', '0', '0', '0.5*h', '0', '-0.5*sin(Bf1)*h', '0', '-0.5*sin(Bf2)*h', '0'],
['-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0'],
['0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '460'],
['0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '460']]

# LD250: brake drive
# 	Frz1	Frf1	Frz2	Frf2	Fdz1	Fdf1	Fdt1	Fdz2	Fdf2	Fdt2	Fc	Ffz1	Fff1	Ffz2	Fff2	ax	ay	alphaZ	Equals
ld250_brake_drive =	[['0', '-cos(Br1)', '0', '-cos(Br2)', '0', '-1', '1', '0', '-1', '1', '0', '0', '-cos(Bf1)', '0', '-cos(Bf2)', '-M', '0', '0', 'M*g*sin(theta)'],
['0', 'sin(Br1)', '0', 'sin(Br2)', '0', '0', '0', '0', '0', '0', '1', '0', '-sin(Bf1)', '0', 	'-sin(Bf2)', '0', '-M', '0', '0'],
['1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', 'M*g*cos(theta)'],
['-(Dc-r*sin(Br1)+y)', 'sin(Br1)*h', 'Dc+r*sin(Br2)-y', 'sin(Br2)*h', '-(Dd+y)', '0', '0', 'Dd-y', '0', '0', 'h', '-(Dc+r*sin(Bf1)+y)', '-sin(Bf1)*h', 'Dc-sin(Bf2)*r-y', '-sin(Bf2)*h', '0', '0', '0', '0'],
['L+r*cos(Br1)+x', 'cos(Br1)*h', 'L+r*cos(Br2)+x', 'cos(Br2)*h', 'x', 'h', '-h', 'x', 'h', '-h', '0', '-(L-r*cos(Bf1)-x)', 'cos(Bf1)*h', '-(L-r*cos(Bf2)-x)', 'cos(Bf2)*h', '0', '0', '0', '0'],
['0', '-cos(Br1)*(Dc-r*sin(Br1)+y)', '0', 'cos(Br2)*(Dc+r*sin(Br2)-y)', '0', '-(Dd+y)', 'Dd+y', '0', 'Dd-y', '-(Dd-y)', '-x', '0', '-cos(Bf1)*(Dc+r*sin(Bf1)+y)', '0', 'cos(Bf2)*(Dc-r*sin(Bf2)-y)', '0', '0', '-Jz', '0'],
['0', '-sin(Br1)*(L+cos(Br1)*r+x)', '0', '-sin(Br2)*(L+cos(Br2)*r+x)', '0', '0', '0', '0', '0', '0', '0', '0', '-sin(Bf1)*(L-cos(Bf1)*r-x)', '0', '-sin(Bf2)*(L-cos(Bf2)*r-x)', '0', '0', '0', '0',	'0'],
['-(Dc-r*sin(Br1)+y)', '0.5*sin(Br1)*h', 'Dc+r*sin(Br2)-y', '0.5*sin(Br2)*h', '-(Dd+y)', '0', '0', 'Dd-y', '0', '0', '0.5*h', '0', '-0.5*sin(Bf1)*h', '0', '-0.5*sin(Bf2)*h', '0', '0', '0', '0'],
['-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '-0.03', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '-0.02', '1', '0', '0', '0', '0'],
['0', '0', '0', '0', '.95*u', '0', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '.95*u', '0', '1*dir', '0', '0', '0', '0', '0', '0', '0', '0', '0'],
['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '-x', 'w^2*(R-y)'],
['0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '460'],
['0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '460']]